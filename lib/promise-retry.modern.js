function r(){return r=Object.assign?Object.assign.bind():function(r){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var e in n)({}).hasOwnProperty.call(n,e)&&(r[e]=n[e])}return r},r.apply(null,arguments)}const t={maxAttempts:10,retryDelay:0,onError:(r,t)=>{}},n=(e,o=t,a=1)=>{const s=r({},t,o);return e(a).catch(r=>{if(s.onError(r,a),a<s.maxAttempts)return new Promise(r=>{setTimeout(()=>r(n(e,o,a+1)),s.retryDelay)});throw r})},e=(r,t={})=>(...e)=>n(()=>r(...e),t);export{e as Retryify,n as promiseRetry};
//# sourceMappingURL=promise-retry.modern.js.map
