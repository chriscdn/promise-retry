{"version":3,"file":"promise-retry.cjs","sources":["../src/index.ts"],"sourcesContent":["type Options = {\n  maxAttempts: number;\n  retryDelay: number;\n  onError: (err: any, attempt: number) => void;\n};\n\nconst defaultOptions: Options = {\n  maxAttempts: 10,\n  retryDelay: 0,\n  onError: (err: any, attempt: number) => {},\n};\n\nfunction promiseRetry<T>(\n  func: (attempt: number) => Promise<T>,\n  options: Partial<Options> = defaultOptions,\n  attempt = 1\n): Promise<T> {\n  const config = { ...defaultOptions, ...options };\n\n  return func(attempt).catch((err: any) => {\n    // For logging...\n    config.onError(err, attempt);\n\n    if (attempt < config.maxAttempts) {\n      return new Promise((resolve) => {\n        setTimeout(\n          () => resolve(promiseRetry(func, options, attempt + 1)),\n          config.retryDelay\n        );\n      });\n    } else {\n      throw err;\n    }\n  });\n}\n\nexport default promiseRetry;\n"],"names":["defaultOptions","maxAttempts","retryDelay","onError","err","attempt","promiseRetry","func","options","config","_extends","Promise","resolve","setTimeout"],"mappings":"oOAMA,IAAMA,EAA0B,CAC9BC,YAAa,GACbC,WAAY,EACZC,QAAS,SAACC,EAAUC,qBAGtB,SAASC,EACPC,EACAC,EACAH,QADAG,IAAAA,IAAAA,EAA4BR,QAC5BK,IAAAA,IAAAA,EAAU,GAEV,IAAMI,EAAMC,EAAA,CAAA,EAAQV,EAAmBQ,GAEvC,OAAOD,EAAKF,GAAc,MAAC,SAACD,GAI1B,GAFAK,EAAON,QAAQC,EAAKC,GAEhBA,EAAUI,EAAOR,YACnB,OAAO,IAAIU,QAAQ,SAACC,GAClBC,WACE,WAAM,OAAAD,EAAQN,EAAaC,EAAMC,EAASH,EAAU,GAAG,EACvDI,EAAOP,WAEX,GAEA,MAAME,CAEV,EACF"}