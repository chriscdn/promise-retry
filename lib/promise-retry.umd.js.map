{"version":3,"file":"promise-retry.umd.js","sources":["../src/index.ts"],"sourcesContent":["type RetryOptions = {\n  maxAttempts: number;\n  retryDelay: number;\n  onError: (err: any, attempt: number) => void;\n};\n\nconst defaultOptions: RetryOptions = {\n  maxAttempts: 10,\n  retryDelay: 0,\n  onError: (err: any, attempt: number) => {},\n};\n\nconst promiseRetry = <T>(\n  func: (attempt: number) => Promise<T>,\n  options: Partial<RetryOptions> = defaultOptions,\n  attempt = 1,\n): Promise<T> => {\n  const config = { ...defaultOptions, ...options };\n\n  return func(attempt).catch((err: any) => {\n    // For logging...\n    config.onError(err, attempt);\n\n    if (attempt < config.maxAttempts) {\n      return new Promise((resolve) => {\n        setTimeout(\n          () => resolve(promiseRetry(func, options, attempt + 1)),\n          config.retryDelay,\n        );\n      });\n    } else {\n      throw err;\n    }\n  });\n};\n\nconst Retryify = <Args extends unknown[], Return>(\n  cb: (...args: Args) => Promise<Return>,\n  options: Partial<RetryOptions> = {},\n) =>\n(...args: Args): Promise<Return> =>\n  promiseRetry<Return>(() => cb(...args), options);\n\nexport { promiseRetry, Retryify, type RetryOptions };\n"],"names":["defaultOptions","maxAttempts","retryDelay","onError","err","attempt","promiseRetry","func","options","config","_extends","Promise","resolve","setTimeout","cb","_arguments","arguments","apply","slice","call"],"mappings":"8bAMA,IAAMA,EAA+B,CACnCC,YAAa,GACbC,WAAY,EACZC,QAAS,SAACC,EAAUC,MAGhBC,EAAe,SACnBC,EACAC,EACAH,YADAG,IAAAA,EAAiCR,YACjCK,IAAAA,EAAU,GAEV,IAAMI,EAAMC,EAAQV,GAAAA,EAAmBQ,GAEvC,OAAOD,EAAKF,GAAc,MAAC,SAACD,GAI1B,GAFAK,EAAON,QAAQC,EAAKC,GAEhBA,EAAUI,EAAOR,YACnB,OAAW,IAAAU,QAAQ,SAACC,GAClBC,WACE,WAAA,OAAMD,EAAQN,EAAaC,EAAMC,EAASH,EAAU,GAAG,EACvDI,EAAOP,WAEX,GAEA,MAAME,CAEV,EACF,aAEiB,SACfU,EACAN,GAAmC,gBAAnCA,IAAAA,EAAiC,CAAE,kBAErCO,EAAAC,UACE,OAAAV,EAAqB,WAAA,OAAMQ,EAAEG,WAAAC,EAAAA,GAAAA,MAAAC,KAAAJ,GAAS,EAAEP,EAAQ"}