!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((n||self).promiseRetry={})}(this,function(n){function t(){return t=Object.assign?Object.assign.bind():function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)({}).hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n},t.apply(null,arguments)}var e={maxAttempts:10,retryDelay:0,onError:function(n,t){}},r=function(n,o,i){void 0===o&&(o=e),void 0===i&&(i=1);var f=t({},e,o);return n(i).catch(function(t){if(f.onError(t,i),i<f.maxAttempts)return new Promise(function(t){setTimeout(function(){return t(r(n,o,i+1))},f.retryDelay)});throw t})};n.Retryify=function(n,t){return void 0===t&&(t={}),function(){var e=arguments;return r(function(){return n.apply(void 0,[].slice.call(e))},t)}},n.promiseRetry=r});
//# sourceMappingURL=promise-retry.umd.js.map
